name: Build and release Docker
# Heavily based on the build action for SARS-CoV2_Workflows (https://github.com/oxfordmmm/SARS-CoV2_workflows/blob/main/.github/workflows/build.yaml)

#We only want to build this container if we have a successful PyPI package
on:
  workflow_run:
    workflows: ["Build and release PyPI"]
    types:
      - completed

env:
  REGISTRY: lhr.ocir.io
  IMAGE_NAME: oxfordmmm/gnomonicus
  IMAGE_NAME_GPAS_LTD: oxfordmmm/gnomonicus

jobs:
  build-docker:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Wait for PyPI to update
        run: sleep 3m
      - 
        name: Find Latest Tag
        uses: oprypin/find-latest-tag@v1.1.0
        with:
          repository: oxfordmmm/gnomonicus  # The repository to scan.
          releases-only: true  # We know that all relevant tags have a GitHub release for them.
        id: gnomonicus  # The step ID to refer to later.
      
      - name: Login to OCR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.OCR_USERNAME }}
          password: ${{ secrets.OCR_TOKEN }}

      - name: Build and push
        id: build_and_push
        uses: docker/build-push-action@v4
        with:
          push: true
          file: environments/Dockerfile
          tags: |
            oxfordmmm/gnomonicus:latest
            oxfordmmm/gnomonicus:${{steps.gnomonicus.outputs.tag}}
            {{ env.REGISTRY }}/${{ secrets.MMM_NAMESPACE }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ secrets.MMM_NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}

      - name: Login to gpasltd OCIR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.OCR_CONTAINER_USERNAME_GPASLTD }}
          password: ${{ secrets.OCR_CONTAINER_TOKEN_GPASLTD }}

      - name: Build and push
        id: build_and_push_gpas_ltd
        uses: docker/build-push-action@v4
        with:
          push: true
          file: environments/Dockerfile
          tags: |
            ${{ env.REGISTRY }}/${{ secrets.GPAS_LTD_NAMESPACE }}/${{ env.IMAGE_NAME_GPAS_LTD }}:${{ github.ref_name }}
      - name: Docker digest
        run: echo ${{ steps.build_and_push.outputs.digest }}
